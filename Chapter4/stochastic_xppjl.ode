#stochastic_xppjl
#generated using XPPjl

#ODEs:
AurBc'=max(0,AurBc+z9-z10)
tr'=tr-log(ran(1))/p14
APC'=max(1,APC+z3-z4)
CycB'=max(1,CycB+z7-z8)
AurBcla'=max(0,AurBcla+z13-z14)
uKT'=max(0,uKT+z1-z2)
MCCfree'=max(1,MCCfree+z5-z6)
uKTla'=max(0,uKTla+z11-z12)


#Algebraic and auxilliary equations:
V12 = katt*uKTla
AurBala=flr(AurBcla*(1 - Stretch*(KTtot*Vbulk - uKTla)^N/((J*KTtot*Vbulk)^N + (KTtot*Vbulk- uKTla)^N)))
p[2..14] = p[j-1] + V[j]
V6 = kimcc*MCCfree + kass*APC*MCCfree/VT
V10 = krem*AurBc
V1 = kerr*AurBa/(1 + BN2)*(KTtot*Vx - uKT)/Vx
z14 = (s2>p13)
z[2..13]=(s2<p[j])&(s2>=p[j-1])
V11 = kerr*AurBala/(1 + BN2)*(KTtot*Vbulk - uKTla)/Vbulk
V8 = (kdcycb + kdcycb_c*APC/VT)*CycB
V5 = (kamcc + kamcc_cdk/VT*Cdk1*AurBatot/(1 + BN2)/(Jamcc + AurBatot/(1 + BN2)))*(uKT + uKTla)*(MCCtot*VT - MCCfree - (APCtot*VT - APC))/VT + kdiss*(APCtot*VT - APC)
AurBa=flr(AurBc*(1 - Stretch*(KTtot*Vx - uKT)^N/((J*KTtot*Vx)^N + (KTtot*Vx - uKT)^N)))
V3 = (kdiss + kimcc)*(APCtot*VT - APC)
V9 = (kloc + kloc_cdk/VT*Cdk1)*(AurBtot*VT - AurBc - AurBcla)*Vx/VT
V14 = krem*AurBcla
p1 = V1
z1 = (s2<p1)
V2 = katt*uKT
s2 = ran(1)*p14
V13 = (kloc + kloc_cdk/VT*Cdk1)*(AurBtot*VT - AurBcla - AurBc)*Vbulk/VT
AurBatot=AurBa + AurBala
V4 = kass*APC*MCCfree/VT
V7 = kscycb*VT
Cdk1=CycB/(1 + RO)
VT=Vx + Vbulk
aux MCCformation = V5
aux uKTtot=uKT + uKTla
aux AurBa=AurBa
aux AurBatot=AurBa + AurBala
aux AurBctot=AurBc + AurBcla


#Parameters:
p APCtot=1.0
p AurBtot=0.15
p BN2=0.0
p J=0.4
p Jamcc=50.0
p KTtot=0.0176
p MCCtot=1.2
p N=4.0
p RO=0.0
p Stretch=0.15
p Vbulk=9375.0
p Vx=625.0
p kamcc=0.0
p kamcc_cdk=750.0
p kass=200.0
p katt=0.5
p kdcycb=0.004
p kdcycb_c=0.5
p kdiss=0.01
p kerr=6.66
p kimcc=0.5
p kloc=0.0
p kloc_cdk=5.0
p krem=10
p kscycb=0.004


#Initials:
init AurBc=31.0
init tr=0.0
init APC=117.0
init CycB=10052.0
init AurBcla=469.0
init uKT=11.0
init MCCfree=2128.0
init uKTla=165.0


#Settings:
@ meth=discrete
@ maxstorage=100000000
@ total=2000000
@ seed=189284124
@ bound=100000000
@ njmp=1000
done
